#!/usr/bin/env bash
set -euo pipefail

usage() {
  echo "Usage: $0 <input-file-with-presigned-urls | single-presigned-url> <output-dir> [base-url]"
  echo "  If base-url is provided, output paths preserve directory structure relative to it."
  exit 1
}

if [[ $# -lt 2 || $# -gt 3 ]]; then
  usage
fi

INPUT="$1"
OUTPUT_DIR="$2"
BASE_URL="${3:-}"

mkdir -p "$OUTPUT_DIR"

MAX_CONCURRENT_DOWNLOADS=6
TMP_ARIA2_INPUT="$(mktemp)"

# Check input existence or treat as single URL
if [[ "$INPUT" =~ ^https?:// ]]; then
  echo "$INPUT" > "$TMP_ARIA2_INPUT.urltmp"
  INPUT="$TMP_ARIA2_INPUT.urltmp"
else
  if [[ ! -f "$INPUT" ]]; then
    echo "[ERROR] Input file '$INPUT' does not exist."
    exit 1
  fi
fi

# Count lines for warning
URL_COUNT=$(grep -cvE '^\s*($|#)' "$INPUT" || true)
if (( URL_COUNT > 100000 )); then
  echo "[WARNING] Input file contains $URL_COUNT URLs. Parsing and directory creation may take a long time."
fi

echo "[INFO] Parsing URLs and preparing directories..."

awk_script='
{
  # Remove leading/trailing spaces
  gsub(/^[ \t]+|[ \t]+$/, "", $0)
  # Skip empty or comment lines
  if ($0 ~ /^#/ || length($0) == 0) next
  url=$0
  # Strip query string for filename
  split(url, a, "?")
  filename=a[1]
  n=split(filename, parts, "/")
  file=parts[n]
  # Determine path to preserve directory structure relative to BASE_URL
  if (baseurl != "") {
    sub(baseurl, "", url)
    sub(/^\//, "", url)
    out_path=output_dir "/" url
  } else {
    out_path=output_dir "/" file
  }
  # Get directory path
  dir=out_path
  sub(/[^\/]+$/, "", dir)
  print url "\t" dir "\t" file
}'

export BASE_URL
export OUTPUT_DIR

mapfile -t entries < <(awk -v baseurl="$BASE_URL" -v output_dir="$OUTPUT_DIR" "$awk_script" "$INPUT")

# Extract directories, uniq, and create
echo "[INFO] Creating directories..."
printf '%s\n' "${entries[@]}" | cut -f2 | sort -u | xargs -P 8 -I{} mkdir -p "{}"

# Prepare aria2 input file
echo "[INFO] Preparing aria2 input file..."
: > "$TMP_ARIA2_INPUT"
for line in "${entries[@]}"; do
  url=$(echo "$line" | cut -f1)
  dir=$(echo "$line" | cut -f2)
  file=$(echo "$line" | cut -f3)
  {
    echo "$url"
    echo "  dir=$dir"
    echo "  out=$file"
  } >> "$TMP_ARIA2_INPUT"
done

echo "[INFO] Starting downloads with aria2c..."
aria2c --max-concurrent-downloads=$MAX_CONCURRENT_DOWNLOADS --split=1 --auto-file-renaming=false --allow-overwrite=true --retry-wait=3 --max-tries=3 -i "$TMP_ARIA2_INPUT"

echo "[INFO] Download complete."

rm -f "$TMP_ARIA2_INPUT"
if [[ -f "$TMP_ARIA2_INPUT.urltmp" ]]; then
  rm -f "$TMP_ARIA2_INPUT.urltmp"
fi
